{"version":3,"sources":["component/Item.js","component/Col.js","component/Grid.js","App.js","serviceWorker.js","actions/app.js","AppContext.js","index.js"],"names":["Item","className","Col","Grid","App","console","log","useEffect","Boolean","window","location","hostname","match","INCREMENT","AppContext","createContext","initialState","count","loading","error","payload","status","response","actionsMap","state","initDate","reducerMap","action","fn","type","Consumer","ReactDOM","render","children","useReducer","value","dispatch","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAWeA,MARf,WACE,OACE,yBAAKC,UAAU,QAAf,M,MCiBWC,MAlBf,WACE,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKSE,MAlBf,WACE,OACE,yBAAKF,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKSG,MAhBf,WAOE,OANAC,QAAQC,IAAI,sBAEZC,qBAAU,WACRF,QAAQC,IAAI,uBACX,IAGD,yBAAKL,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCFYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCjBJC,EAAU,Y,8NCEZ,IAAMC,EAAaC,0BACfC,EAAe,CACjBC,MAAM,EACNC,SAAS,EACTC,MAAO,KACPC,QAAS,KACTC,OAAQ,KACRC,SAAU,MAGNC,EAAU,eACbV,GAAY,SAACW,GACZ,IAAMC,EAAWD,EAAMP,QACvB,O,yVAAO,CAAP,GACKO,EADL,CAEEC,gBAKAC,EAAa,WAAwC,IAAvCF,EAAsC,uDAA9BR,EAAcW,EAAgB,uDAAP,GAC3CC,EAAKL,EAAWI,EAAOE,MAC7B,OAAOD,EAAKA,EAAGJ,EAAOG,GAAUH,GAcTV,EAAWgB,SChCpCC,IAASC,OACP,mBDoByB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACjBC,qBAAWR,EAAYV,GADN,mBAErCmB,EAAQ,CAAEX,MAF2B,KAEpBY,SAFoB,MAIzC,OACE,kBAACtB,EAAWuB,SAAZ,CAAqBF,MAAOA,GACzBF,KC1BL,KACE,kBAAC,EAAD,OAEFK,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fda4a7a1.chunk.js","sourcesContent":["import React from 'react';\nimport './styles/Item.scss';\n\nfunction Item() {\n  return (\n    <div className=\"Item\">\n      0\n    </div>\n  );\n}\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item'\nimport './styles/Col.scss';\n\nfunction Col() {\n  return (\n    <div className=\"col\">\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      <Item />\n      \n    </div>\n  );\n}\n\nexport default Col;\n","import React from 'react';\nimport Col from './Col'\n\nfunction Grid() {\n  return (\n    <div className=\"grid\">\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      <Col />\n      \n    </div>\n  );\n}\n\nexport default Grid;\n","import React,{ useEffect } from 'react';\nimport './App.scss';\nimport Grid from './component/Grid';\n\nfunction App() {\n  console.log(\"componentWillMount\");\n\n  useEffect(() => {\n    console.log(\"componentDidMount\");\n  }, []); \n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Grid />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const  \n  INCREMENT='increment',\n  GET_DATA ='get-data',\n  REQUEST = 'request',\n  SUCCESS='succes',\n  ERROR='error',\n  INITDATE='init-date',\n  ENDDATE='end-date';\n  \n\n\nexport function increment() {\n  return {\n    type: INCREMENT,\n  };\n}\n\nexport function getAuth( arg ) {\n  return {\n    type: GET_DATA,\n    payload:{ arg }\n  };\n}\n","import React, { createContext,useReducer } from 'react';\nimport { INCREMENT } from './actions/app'\n\nconst AppContext = createContext();\nlet initialState = {\n  count:0,\n  loading: false,\n  error: null,\n  payload: null,\n  status: null,\n  response: null,\n};\n\nconst actionsMap = {\n  [INCREMENT]: (state) => {\n    const initDate = state.count++;\n    return {\n      ...state,\n      initDate\n    }\n  }\n};\n\nconst reducerMap = (state = initialState, action = {}) => {\n  const fn = actionsMap[action.type];\n  return fn ? fn(state, action) : state;\n}\n\nconst AppContextProvider = ({children}) => {\n  let [state, dispatch] = useReducer(reducerMap, initialState);\n  let value = { state, dispatch };\n  \n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nlet AppContextConsumer = AppContext.Consumer;\n\n\nexport { AppContext,AppContextProvider,AppContextConsumer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {AppContextProvider} from './AppContext'\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}